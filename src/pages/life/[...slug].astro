---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const entries = await getCollection('life');
  return entries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout title={entry.data.title}>
  <main class="max-w-4xl mx-auto px-4 py-8">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm">
      <article class="prose prose-sm md:prose lg:prose-xl dark:prose-invert mx-auto p-4 md:p-8">
        <header class="mb-6 md:mb-8">
          <h1 class="text-2xl md:text-4xl font-bold mb-3 md:mb-4 dark:text-white">{entry.data.title}</h1>
          <div class="flex flex-wrap items-center gap-2 md:gap-4 text-gray-600 dark:text-gray-400 text-sm md:text-base">
            <time datetime={entry.data.date.toISOString()} class="shrink-0">
              {entry.data.date.toLocaleDateString()}
            </time>
            {entry.data.tags && (
              <div class="flex flex-wrap gap-1.5 md:gap-2">
                {entry.data.tags.map(tag => (
                  <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 text-xs md:text-sm px-2 py-0.5 md:px-3 md:py-1 rounded-full">
                    {tag}
                  </span>
                ))}
              </div>
            )}
          </div>
        </header>

        <div class="mt-6 md:mt-8">
          <Content />
        </div>
      </article>
    </div>
  </main>

  <!-- 图片放大模态框 -->
  <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-60 z-50 hidden items-center justify-center cursor-zoom-out p-1">
    <img id="modalImage" class="max-h-[100vh] max-w-[100vw] object-contain" src="" alt="" />
  </div>
</Layout>

<style>
  /* 确保内容区域的样式正确 */
  .prose {
    max-width: none;
  }

  /* 图片样式 */
  .prose :global(img) {
    margin: 1rem auto;
    border-radius: 0.7rem;
    max-width: 100%;
    height: auto;
    display: block;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    cursor: zoom-in;
    transition: transform 0.3s ease;
  }

  .prose :global(img:hover) {
    transform: scale(1.05);
  }

  /* 暗色模式下的代码块样式 */
  .dark .prose :global(pre) {
    background-color: #1e293b !important;
  }

  .dark .prose :global(code) {
    color: #e2e8f0 !important;
  }

  /* 移动端的排版样式 */
  @media (max-width: 768px) {
    .prose :global(h1) {
      font-size: 1.5rem !important;
      margin-top: 0.5em !important;
      margin-bottom: 0.5em !important;
    }

    .prose :global(h2) {
      font-size: 1.25rem !important;
      margin-top: 0.5em !important;
      margin-bottom: 0.3em !important;
    }

    .prose :global(h3) {
      font-size: 1.125rem !important;
      margin-top: 0.5em !important;
      margin-bottom: 0.3em !important;
    }

    .prose :global(p) {
      font-size: 0.875rem !important;
      margin-top: 0.3em !important;
      margin-bottom: 0.3em !important;
      line-height: 1.5 !important;
    }

    .prose :global(ul),
    .prose :global(ol) {
      padding-left: 1rem !important;
      margin: 0.3em 0 !important;
    }

    .prose :global(li) {
      font-size: 0.875rem !important;
      margin: 0.2em 0 !important;
    }

    .prose :global(blockquote) {
      padding: 0.5rem !important;
      margin: 0.5em 0 !important;
      font-size: 0.875rem !important;
    }

    .prose :global(pre) {
      padding: 0.5rem !important;
      margin: 0.5em 0 !important;
      font-size: 0.875rem !important;
    }

    .prose :global(code) {
      font-size: 0.875rem !important;
    }
  }
</style>

<script>
  // 获取所有文章中的图片
  const images = document.querySelectorAll('.prose img');
  const modal = document.getElementById('imageModal') as HTMLDivElement;
  const modalImg = document.getElementById('modalImage') as HTMLImageElement;

  if (modal && modalImg) {
    // 为每个图片添加点击事件
    images.forEach(img => {
      if (img instanceof HTMLImageElement) {
        img.addEventListener('click', () => {
          modal.style.display = 'flex';
          modalImg.src = img.src;
          modalImg.alt = img.alt;
          document.body.style.overflow = 'hidden'; // 防止背景滚动
        });
      }
    });

    // 点击模态框关闭
    modal.addEventListener('click', () => {
      modal.style.display = 'none';
      document.body.style.overflow = ''; // 恢复背景滚动
    });

    // 阻止点击图片时关闭模态框
    modalImg.addEventListener('click', (e) => {
      e.stopPropagation();
    });

    // ESC 键关闭模态框
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.style.display === 'flex') {
        modal.style.display = 'none';
        document.body.style.overflow = '';
      }
    });
  }
</script> 